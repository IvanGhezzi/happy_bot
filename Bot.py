import os
import json
import logging
import asyncio
import datetime

import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ debug-–ª–æ–≥–æ–≤
def debug(message):
    print(f"[DEBUG] {message}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def get_sheet():
    creds_json = os.environ.get("GOOGLE_CREDENTIALS")
    if not creds_json:
        raise ValueError("GOOGLE_CREDENTIALS not –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

    creds_dict = json.loads(creds_json)
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    gc = gspread.authorize(credentials)
    sh = gc.open_by_key(creds_dict["sheet_id"])  # –î–æ–±–∞–≤—å –∫–ª—é—á —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ JSON
    worksheet = sh.sheet1
    return worksheet

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
INTERVALS = [0, 30]
already_sent = set()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data["chat_id"] = chat_id
    await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—á–Ω—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–±—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç üôÇ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    try:
        sheet = get_sheet()
        sheet.append_row([now, chat_id, text])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
async def periodic_task(application: Application):
    while True:
        now = datetime.datetime.now()
        hour_minute = (now.hour, now.minute)

        chat_id = user_data.get("chat_id")
        debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: {now.strftime('%H:%M:%S')} | chat_id: {chat_id}")

        if hour_minute[1] in INTERVALS:
            key = f"{now.hour}:{now.minute}"
            if key not in already_sent:
                already_sent.add(key)

                # –û—á–∏—â–∞–µ–º –∫–ª—é—á–∏, –µ—Å–ª–∏ –Ω–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π —á–∞—Å
                if now.minute == 0:
                    already_sent.clear()

                if chat_id:
                    await application.bot.send_message(
                        chat_id=chat_id,
                        text="–ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?\n–û—Ü–µ–Ω–∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10\n–î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å."
                    )
                    debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª {now.strftime('%Y-%m-%d %H:%M')}")
        await asyncio.sleep(20)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def run():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    application.job_queue.run_repeating(lambda _: asyncio.create_task(periodic_task(application)), interval=60, first=1)

    await application.run_polling()

def main():
    asyncio.run(run())

if __name__ == "__main__":
    main()
